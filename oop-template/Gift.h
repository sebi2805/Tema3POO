#ifndef GIFT_H
#define GIFT_H
#include <iostream>
#include <ostream>
#include <vector>
#include <string.h>
#include <memory>
#include "BToyClass.h"
#include "Clone.h"
#include "AutoGeneratedIds.h"

class Gift : AutoGeneratedId, Clone
{
private:
    std::string name, destination, personName;
    std::vector<shared_ptr<BToyClass>> toys;
    int toysLength = 0;

public:
    explicit Gift(const std::string _name = "undefined ",
                  const std::string _destination = "undefined", const std::string _personName = "undefined",
                  std::vector<shared_ptr<BToyClass>> _toys = {}, int _toysLength = 0);
    Gift(const Gift &obj);
    Gift &operator=(const Gift &obj);
    friend istream &operator>>(istream &in, Gift &obj);
    friend ostream &operator<<(ostream &out, Gift &obj);
    friend void updateToyHelper(istream &in, Gift &obj, bool update);
    friend bool operator==(const Gift &lhs, const Gift &rhs);
    const std::string getName() const;
    const std::string getDestination() const;
    const std::string getPersonName() const;
    std::vector<shared_ptr<BToyClass>> getToys();
    const int getToysLength() const;
    void setName(const std::string _name);
    void setDestination(const std::string _destination);
    void setPersonName(const std::string _personName);
    void setToys(const std::vector<shared_ptr<BToyClass>> _toys, const int _toysLength);
    void updateGift();
    void setToysLength(int _toysLength);
    Clone *clone();
    template <typename ToyType>
    void printToy(const ToyType &toy, std::ostream &out)
    {
        out << toy;
    }

    void summariseGift();
    ~Gift()
    {
    }
};

#endif